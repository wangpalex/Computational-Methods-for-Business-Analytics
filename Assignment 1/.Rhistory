trainSetWithPayMax = trainSet2[,-c(1,7:13,15,16)]  #只含有PayMAX的trainSet
testSetWithPayMax = testSet[,-c(1,7:13,15,16)]    #只含有PayMAX的testSet
trainSetFull = trainSet2[,-c(1,13)]
testSetFull = testSet[,-c(1,13)]
# Age is useless, retain education and sex, pay_
trainSetSelected = trainSet2[,-c(1,6,8,10,11,13,15,16)]
testSetSelected = testSet[,-c(1,6,8,10,11,13,15,16)]
# Recursive partitioning method
# Uses Gini index to calculate impurity index
# Try two different values of the complexity
# control parameter (cp)
#使用PAY_MAX作为属性
cart.tree2 = rpart(train.target ~ .,
trainSetSelected,
model=TRUE,
method='class',
control=rpart.control(cp=0.001)) #cp选择0.001 或 0.01 比较
train.cart2 = predict(cart.tree2, newdata=trainSetSelected,type="class")
test.cart2 = predict(cart.tree2, newdata=testSetSelected,type="class")
table(train.cart2,train.target)
mean(train.cart2 == train.target) # 0.8099(0.001)    #0.7885(0.01)  --->pruning有必要 反而提升test accur
table(test.cart2, test.target)
mean(test.cart2 == test.target)   # 0.7851           #0.7894
rpart.plot(cart.tree2)#画树图
set.seed(666)
rf2 = randomForest(train.target ~ .,  data = trainSetSelected)
print(rf2) # R^2 = 85.95%
plot(rf2)
train.rf2 = predict(rf2, newdata = trainSetSelected)
test.rf2 = predict(rf2, newdata = testSetSelected)
table(train.rf2, train.target)
mean(train.rf2 == train.target) # 0.9319
table(test.rf2, test.target)
mean(test.rf2 == test.target) # 0.8164
svm.radial <- svm(train.target ~ ., data=trainSetSelected, type="C-classification", kernel="radial")
train.res <- predict(svm.radial,data = trainSetSelected)
test.res <- predict(svm.radial, newdata = testSetSelected)
mean(train.res == train.target) # 0.7318 on oversampled trainSet
mean(test.res == test.target) # 0.7751 on oversampled trainSet
table(train.res, train.target)
table(test.res, test.target)
backward = regsubsets(trainSet$TARGET ~ .,trainSet[,-c(1,13)],method = "backward")
summary(backward)
plot(backward,scale="r2")
forward = regsubsets(trainSet$TARGET ~ .,trainSet[,-c(1,13)],method = "forward")
summary(forward)
plot(forward,scale="r2")
knitr::opts_chunk$set(echo = TRUE)
backward = regsubsets(trainSet$TARGET ~ .,trainSet[,-c(1,13)],method = "backward")
library(Hmisc)
library(corrplot)
library(ggplot2)
library(Rfast)
# feature selection
library(leaps)
# SVM
library(e1071)
# CART tree
library(partykit)
library(rpart)
library(rpart.plot)
# C50 tree
library(C50)
# Bagging
library(caret)
library(ipred)
# Random forest
library(randomForest)
# Neural Networks
library(nnet)
library(NeuralNetTools)
library(naivebayes)
library(InformationValue)
backward = regsubsets(trainSet$TARGET ~ .,trainSet[,-c(1,13)],method = "backward")
summary(backward)
plot(backward,scale="r2")
forward = regsubsets(trainSet$TARGET ~ .,trainSet[,-c(1,13)],method = "forward")
summary(forward)
plot(forward,scale="r2")
view(trainSetFull)
View(testSetWithPayMax)
View(testSetFull)
View(testSetFull)
names(trainSet2$LIMIT_BAL)
names(trainSet2)
knitr::opts_chunk$set(echo = TRUE)
data = read.table("segment.dat")
target <- ifelse(data$V20 == 1, "B", ifelse (data$V20 == 2,"S", ifelse (data$V20 == 3, "F",ifelse(data$V20 == 4,"C", ifelse(data$V20 == 5,"W",ifelse(data$V20 == 6,"P","G"))))) )
class <- as.factor(target)
alldata <- cbind(data,class)
library(ggplot2)
ggplot(alldata,aes(class)) + geom_bar(fill="lightblue")
n <- nrow(alldata)
set.seed(123)
index <- 1:n
trainindex <- sample(index, trunc(n/3))
train.data <-alldata[trainindex,]
ntrain = nrow(train.data)
test.data <- alldata[-trainindex,]
train.class <- train.data$class
test.class <- test.data$class
ggplot(train.data,aes(class)) + geom_bar(fill="lightgreen") + ggtitle("Frequency of each group of data samples in the training set")
ggplot(test.data,aes(class)) + geom_bar(fill="green") + ggtitle("Frequency of each group of data samples in the test set")
View(data)
View(data)
View(trainSetSelected)
?Uniform
source('~/.active-rstudio-document', echo=TRUE)
s_seq
range(1,10)
list(range(1,10))
c(range(1,10))
v(range(1,10))
c(1)
c(1,10)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runif(3,0,1)
runif(c(2,3)),0,1
runif(c(2,3),0,1)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
c()
c = c()
c.append(1)
c.add(1)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
seq
source('~/.active-rstudio-document', echo=TRUE)
length(sum_seq)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
length(sum_seq)
source('~/.active-rstudio-document', echo=TRUE)
sum_seq
sum_seq
source('~/.active-rstudio-document', echo=TRUE)
sum(runif(1000,0,1)
)
sum(runif(1000, 0 , 1))
sum(runif(1000, 0 , 1))
sum(runif(1000, 0 , 1))
sum(runif(1000, 0 , 1))
sum(runif(1000, 0 , 1))
sum(runif(1000, 0 , 1))
sum(runif(1000, 0 , 1))
?append
source('~/.active-rstudio-document', echo=TRUE)
sum_seq
source('~/.active-rstudio-document', echo=TRUE)
sum_seq
append(NULL,1)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/OneDrive - National University of Singapore/Curriculum/Sem_04/ST3247/R/r_prog_02_script_01.R', echo=TRUE)
source('~/OneDrive - National University of Singapore/Curriculum/Sem_04/ST3247/R/r_prog_02_script_02.R', echo=TRUE)
source('~/OneDrive - National University of Singapore/Curriculum/Sem_04/ST3247/R/03_prng.R', echo=TRUE)
v = c(2,3,4)
max(v)
m = matrix(rep(1,1000),ncol=10)
m
apply(m, 1, max)
apply(m, 2, max)
source('~/OneDrive - National University of Singapore/Curriculum/Sem_04/ST3247/Tutorial/T1.R', echo=TRUE)
s
source('~/OneDrive - National University of Singapore/Curriculum/Sem_04/ST3247/Tutorial/T1.R', echo=TRUE)
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
usingRepeat()
source('~/OneDrive - National University of Singapore/Curriculum/Sem_04/ST3247/Tutorial/T1.R', echo=TRUE)
usingRepeat()
pair
source('~/OneDrive - National University of Singapore/Curriculum/Sem_04/ST3247/Tutorial/T1.R', echo=TRUE)
usingRepeat()
y = usingRepeat()
y
setwd("~/OneDrive - National University of Singapore/Curriculum/Sem_04/BT3102/Assignments/Computational-Methods-for-Business-Analytics")
rank([[1,1],[2,2]])
rank(matrix(c(1,1,2,2),nrnrow = ))
rank(matrix(c(1,1,2,2),nrow = ))
rank(matrix(c(1,1,2,2),nrow = ))
rank(matrix(c(1,1,2,2),nrow = 2))
rankMatrix(matrix(c(1,1,2,2),nrow = 2))
install.packages(matrix)
install.packages(Matrix)
install.packages("matlab")
knitr::opts_chunk$set(echo = TRUE)
library(matlab)
rank(matrix(c(1,1,2,2),nrow=2))
install.packages("Matrix")
library(Matrix)
library(Matrix)
matrix_rank(matrix(c(1,1,2,2),nrow=2))
matrix_rank(matrix(c(1,1,2,2),nrow=2))
library(Matrix)
rankMatrix(matrix(c(1,1,2,2),nrow=2))
det(matrix(c(1,1,2,2),nrow=2))
det(matrix(c(1,1,2,2),nrow=2))
library(Matrix)
det(matrix(c(1,1,2,2),nrow=2))
det(matrix(c(1,1,2,2,1,2),nrow=3))
library(Matrix)
rankMatrix(matrix(c(1,1,2,2),nrow=2))
rankMatrix(matrix(c(1,1,2,2,1,2),nrow=3))
rankMatrix(matrix(c(1,1,2,0),nrow=2))
rankMatrix(matrix(c(1,2,3,2,0,2),nrow=3))
rankMatrix(matrix(c(1,1,2,2,1,2),nrow=3))
setwd("~/OneDrive - National University of Singapore/Curriculum/Sem_04/BT3102/Assignments/Computational-Methods-for-Business-Analytics/Assignment 1")
df = read.csv("exercise_and_cholesterol.csv")
View(df)
old_df = df[df$Age=="old"]
young_df = df[df$Age=="young"]
View(old_df)
View(young_df)
old_df = df[df$Age=="old",]
young_df = df[df$Age=="young",]
View(old_df)
View(df)
old_df = df[df$Age=="Old",]
young_df = df[df$Age=="Young",]
View(old_df)
View(young_df)
plot(old_df$Cholesterol ~ old_df$Exercise)
plot(old_df$Cholesterol ~ old_df$Exercise,color="red")
?plot
plot(old_df$Cholesterol ~ old_df$Exercise,col="red",pch=20)
plot(young_df$Cholesterol ~ young_df$Exercise,col="blue",pch=2)
plot(old_df$Cholesterol ~ old_df$Exercise,col="red",pch=20)
plot(young_df$Cholesterol ~ young_df$Exercise,col="blue",pch=17)
plot(old_df$Cholesterol ~ old_df$Exercise,col="red",pch=20)
par(new=TRUE)
plot(young_df$Cholesterol ~ young_df$Exercise,col="blue",pch=17)
attach(df)
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17))
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(30,50))
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(1,18))
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
attach(df)
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
abline(all_model$coefficients[1],all_model$coefficients[2])
?line
?lty
?plot
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
young_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Young",])
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Young",])
old_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Old",])
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
abline(young_model$coefficients[1],young_model$coefficients[2], lty="dotted",col="blue")
abline(old_model$coefficients[1],old_model$coefficients[2], lty="dashed",col="red")
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Young",])
old_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Old",])
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Young",])
old_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Old",])
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
abline(young_model$coefficients[1],young_model$coefficients[2], lty="dotted",col="blue")
abline(old_model$coefficients[1],old_model$coefficients[2], lty="dashed",col="red")
legend(1, 95, legend=c("Old only", "Young only","Combined data"),
col=c("red", "blue","black"), lty=c("dotted","dashed","solid"), cex=0.8)
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Young",])
old_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Old",])
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
abline(young_model$coefficients[1],young_model$coefficients[2], lty="dotted",col="blue")
abline(old_model$coefficients[1],old_model$coefficients[2], lty="dashed",col="red")
legend(1, 50, legend=c("Old only", "Young only","Combined data"),
col=c("red", "blue","black"), lty=c("dotted","dashed","solid"), cex=0.8)
legend(1, 50, legend=c("Old only", "Young only","Combined data"),
col=c("red", "blue","black"), lty=c("dotted","dashed","solid"), cex=0.8)
all_model = lm(Cholesterol ~ Exercise, data=df)
df = read.csv("exercise_and_cholesterol.csv")
old_df = df[df$Age=="Old",]
young_df = df[df$Age=="Young",]
attach(df)
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Young",])
old_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Old",])
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
abline(young_model$coefficients[1],young_model$coefficients[2], lty="dotted",col="blue")
abline(old_model$coefficients[1],old_model$coefficients[2], lty="dashed",col="red")
legend(1, 50, legend=c("Old only", "Young only","Combined data"),
col=c("red", "blue","black"), lty=c("dotted","dashed","solid"), cex=0.8)
df = read.csv("exercise_and_cholesterol.csv")
old_df = df[df$Age=="Old",]
young_df = df[df$Age=="Young",]
attach(df)
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Young",])
old_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Old",])
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
abline(young_model$coefficients[1],young_model$coefficients[2], lty="dotted",col="blue")
abline(old_model$coefficients[1],old_model$coefficients[2], lty="dashed",col="red")
legend(1, 20, legend=c("Old only", "Young only","Combined data"),
col=c("red", "blue","black"), lty=c("dotted","dashed","solid"), cex=0.8)
df = read.csv("exercise_and_cholesterol.csv")
old_df = df[df$Age=="Old",]
young_df = df[df$Age=="Young",]
attach(df)
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Young",])
old_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Old",])
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
abline(young_model$coefficients[1],young_model$coefficients[2], lty="dotted",col="blue")
abline(old_model$coefficients[1],old_model$coefficients[2], lty="dashed",col="red")
legend(20, 20, legend=c("Old only", "Young only","Combined data"),
col=c("red", "blue","black"), lty=c("dotted","dashed","solid"), cex=0.8)
df = read.csv("exercise_and_cholesterol.csv")
old_df = df[df$Age=="Old",]
young_df = df[df$Age=="Young",]
attach(df)
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Young",])
old_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Old",])
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
abline(young_model$coefficients[1],young_model$coefficients[2], lty="dotted",col="blue")
abline(old_model$coefficients[1],old_model$coefficients[2], lty="dashed",col="red")
legend(6, 50, legend=c("Old only", "Young only","Combined data"),
col=c("red", "blue","black"), lty=c("dotted","dashed","solid"), cex=0.8)
df = read.csv("exercise_and_cholesterol.csv")
old_df = df[df$Age=="Old",]
young_df = df[df$Age=="Young",]
attach(df)
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Young",])
old_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Old",])
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
abline(young_model$coefficients[1],young_model$coefficients[2], lty="dotted",col="blue")
abline(old_model$coefficients[1],old_model$coefficients[2], lty="dashed",col="red")
legend(6, 50, legend=c("Old only", "Young only","Combined data"),
col=c("red", "blue","black"), lty=c("dotted","dashed","solid"), cex=0.8)
df = read.csv("exercise_and_cholesterol.csv")
old_df = df[df$Age=="Old",]
young_df = df[df$Age=="Young",]
attach(df)
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Young",])
old_model = lm(Cholesterol ~ Exercise, data=df[df$Age=="Old",])
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
abline(young_model$coefficients[1],young_model$coefficients[2], lty="dotted",col="blue")
abline(old_model$coefficients[1],old_model$coefficients[2], lty="dashed",col="red")
legend(6, 50, legend=c("Old only", "Young only","Combined data"),
col=c("red", "blue","black"), lty=c("dotted","dashed","solid"), cex=1)
df = read.csv("exercise_and_cholesterol.csv")
old_df = df[df$Age=="Old",]
young_df = df[df$Age=="Young",]
attach(df)
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=old_df)
old_model = lm(Cholesterol ~ Exercise, data=young_df)
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
abline(young_model$coefficients[1],young_model$coefficients[2], lty="dotted",col="blue")
abline(old_model$coefficients[1],old_model$coefficients[2], lty="dashed",col="red")
legend(6, 50, legend=c("Old only", "Young only","Combined data"),
col=c("red", "blue","black"), lty=c("dotted","dashed","solid"), cex=1)
df = read.csv("exercise_and_cholesterol.csv")
old_df = df[df$Age=="Old",]
young_df = df[df$Age=="Young",]
attach(df)
plot(Cholesterol ~ Exercise,col=ifelse(Age=="Old","red","blue"),pch=ifelse(Age=="Old",20,17),ylim=c(35,50),xlim=c(6,18))
all_model = lm(Cholesterol ~ Exercise, data=df)
young_model = lm(Cholesterol ~ Exercise, data=young_df)
old_model = lm(Cholesterol ~ Exercise, data=old_df)
abline(all_model$coefficients[1],all_model$coefficients[2], lty="solid")
abline(young_model$coefficients[1],young_model$coefficients[2], lty="dotted",col="blue")
abline(old_model$coefficients[1],old_model$coefficients[2], lty="dashed",col="red")
legend(6, 50, legend=c("Old only", "Young only","Combined data"),
col=c("red", "blue","black"), lty=c("dotted","dashed","solid"), cex=1)
View(df)
set.seed(37)
# Data generation
x = runif(1000,1,5000) # Sample 1000 points uniformly from (1,5000)
y = 0.7 + 2*x + rnorm(1)
set.seed(37)
# Data generation
x = runif(1000,1,5000) # Sample 1000 points uniformly from (1,5000)
y = 0.7 + 2*x + rnorm(1)
plot(y ~ x)
rnorm(1)
x
x[1]
y[1]
set.seed(37)
# Data generation
x = runif(1000,1,2000) # Sample 1000 points uniformly from (1,5000)
y = 0.7 + 2*x + rnorm(1)
plot(y ~ x)
set.seed(37)
# Data generation
x = runif(1000,1,1000) # Sample 1000 points uniformly from (1,5000)
y = 0.7 + 2*x + rnorm(1)
plot(y ~ x)
set.seed(37)
# Data generation
x = runif(1000,1,3000) # Sample 1000 points uniformly from (1,5000)
y = 0.7 + 2*x + rnorm(1)
plot(y ~ x)
set.seed(37)
# Data generation
x = runif(1000,1,10) # Sample 1000 points uniformly from (1,5000)
y = 0.7 + 2*x + rnorm(1)
plot(y ~ x)
set.seed(37)
# Data generation
x = runif(1000,0,1) # Sample 1000 points uniformly from (1,5000)
y = 0.7 + 2*x + rnorm(1)
plot(y ~ x)
set.seed(37)
# Data generation
x = rnorm(1000) # Sample 1000 points from N(0, 1)
y = 0.7 + 2*x + rnorm(1)
plot(y ~ x)
set.seed(37)
# Data generation
x = rnorm(1000) # Sample 1000 points from N(0, 1)
y = 0.7 + 2*x + rnorm(1)
plot(y ~ x)
hist(y ~ x)
set.seed(37)
# Data generation
x = rnorm(1000) # Sample 1000 points from N(0, 1)
y = 0.7 + 2*x + rnorm(1)
plot(y ~ x)
hist(y)
set.seed(37)
# Data generation
x = rnorm(1000) # Sample 1000 points from N(0, 1)
y = 0.7 + 2*x + rnorm(1)
plot(y ~ x)
hist(x)
hist(y)
summary(model)
model = lm(y ~ x)
summary(model)
# Use lm()
model = lm(y ~ x)
set.seed(37)
# Data generation
x = rnorm(1000) # Sample 1000 points from N(0, 1)
y = 0.7 + 2*x + rnorm(1)
plot(y ~ x)
hist(x)
hist(y)
# Use lm()
model = lm(y ~ x)
summary(model)
set.seed(37)
# Data generation
x = rnorm(1000) # Sample 1000 points from N(0, 1)
e = rnorm(1000)
y = 0.7 + 2*x + e
plot(y ~ x)
hist(x)
hist(y)
# Use lm()
model = lm(y ~ x)
summary(model)
