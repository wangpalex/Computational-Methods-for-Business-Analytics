X = cbind(rep(1,N),x)
beta_h = ginv(t(X)%*%X)%*%t(X)%*%Y
beta1 = beta_h[2]
}
vec_loop = Vectorize(single_loop)
res1 = vec_loop(rep(25,S))
hist(res1)
res2 = vec_loop(rep(100,S))
hist(res2)
mean(res1) # 1.907382x
mean(res2) # -1.599096
var(res1) # 3427.213
var(res2) # 29851.75
t.test(res1, res2, alternative = "two.sided", var.equal = FALSE) # p-value = 0.05461
#Anderson-Darling normality test
ad.test(res1) # p-value = 2.2e-16
qqnorm(res1)
qqline(res1)
ad.test(res1) # p-value = 2.2e-16
qqnorm(res2)
qqline(res2)
plot_density(res1,res2)
class(res2_hist$density)
res2_hist$density
plot_density = function(res1, res2) {
# Call lm_reg and do the computation
cores=detectCores()
cl <- parallel::makeCluster(2, setup_strategy = "sequential")
registerDoParallel(cl)
stopCluster(cl)
# Plot the distribution of beta1^hat and normal distribution
x = seq(min(res1), max(res1), length=100)
hx = dnorm(x,mean=mean(res1),sd=sd(res1))
res1_hist=hist(res1, breaks = 10^2, plot=FALSE)
res2_hist=hist(res2, breaks = 10^2, plot=FALSE)
plot(x,hx,xlab="",ylab="",main="",
col="blue",lty=2,type="l",lwd=1,ylim=c(0,max(c(res1_hist$density, res2_hist$density))))
mtext("beta^hat",side=1,line=2)
mtext("density",side=2, line=2)
lines(res1_hist$mids,res1_hist$density,
col="red",lty=1,lwd=1)
lines(res2_hist$mids,res2_hist$density,
col="green",lty=1,lwd=1)
legend("topleft",
legend=c("normal distribution",
"distribution of 100000 betas with N=100",
"distribution of 100000 betas with N=25"),
col=c("blue","red","green"),
lty=c(2,1,1),cex=0.8,bty = "n")
}
plot_density(res1,res2)
set.seed(37)
S = 10000
single_loop = function(N) {
x = rnorm(N)
e = rcauchy(N)
Y = 0.7 + 2*x + e
X = cbind(rep(1,N),x)
beta_h = ginv(t(X)%*%X)%*%t(X)%*%Y
beta1 = beta_h[2]
}
vec_loop = Vectorize(single_loop)
res1 = vec_loop(rep(25,S))
hist(res1)
res2 = vec_loop(rep(100,S))
hist(res2)
mean(res1) # 1.907382x
mean(res2) # -1.599096
var(res1) # 3427.213
var(res2) # 29851.75
t.test(res1, res2, alternative = "two.sided", var.equal = FALSE) # p-value = 0.05461
#Anderson-Darling normality test
ad.test(res1) # p-value = 2.2e-16
qqnorm(res1)
qqline(res1)
ad.test(res1) # p-value = 2.2e-16
qqnorm(res2)
qqline(res2)
plot_density(res1,res2)
plot_density = function(res1, res2) {
# Call lm_reg and do the computation
cores=detectCores()
cl <- parallel::makeCluster(2, setup_strategy = "sequential")
registerDoParallel(cl)
stopCluster(cl)
# Plot the distribution of beta1^hat and normal distribution
x = seq(min(res1), max(res1), length=100)
hx = dnorm(x,mean=mean(res1),sd=sd(res1))
res1_hist=hist(res1, breaks = 10^2, plot=FALSE)
res2_hist=hist(res2, breaks = 10^2, plot=FALSE)
plot(x,hx,xlab="",ylab="",main="",
col="blue",lty=2,type="l",lwd=1,ylim=c(0,max(c(res1_hist$density, res2_hist$density))))
mtext("beta^hat",side=1,line=2)
mtext("density",side=2, line=2)
lines(res1_hist$mids,res1_hist$density,
col="red",lty=1,lwd=1)
lines(res2_hist$mids,res2_hist$density,
col="green",lty=1,lwd=1)
legend("topleft",
legend=c("normal distribution",
"distribution of 100000 betas with N=100",
"distribution of 100000 betas with N=25"),
col=c("blue","red","green"),
lty=c(2,1,1),cex=0.8,bty = "n")
}
plot_density(res1,res2)
set.seed(37)
S = 10000
single_loop = function(N) {
x = rnorm(N)
e = rnorm(N)
Y = 0.7 + 2*x + e
X = cbind(rep(1,N),x)
beta_h = ginv(t(X)%*%X)%*%t(X)%*%Y
beta1 = beta_h[2]
}
vec_loop = Vectorize(single_loop)
res1 = vec_loop(rep(25,S))
hist(res1)
res2 = vec_loop(rep(100,S))
hist(res2)
mean(res1) # 2.002271
mean(res2) # 1.998513
var(res1) # 0.04465469
var(res2) # 0.01046778
t.test(res1, res2, alternative = "two.sided", var.equal = FALSE) # p-value = 0.1095
# Test normality
library(nortest)
#Anderson-Darling normality test
ad.test(res1) # p-value = 2.064e-08
qqnorm(res1)
qqline(res1)
ad.test(res1) # p-value = 2.064e-08
qqnorm(res2)
qqline(res2)
plot_density = function(res1, res2) {
# Call lm_reg and do the computation
cores=detectCores()
cl <- parallel::makeCluster(2, setup_strategy = "sequential")
registerDoParallel(cl)
stopCluster(cl)
# Plot the distribution of beta1^hat and normal distribution
x = seq(min(res1), max(res1), length=100)
hx = dnorm(x,mean=mean(res1),sd=sd(res1))
res1_hist=hist(res1, breaks = 10^2, plot=FALSE)
res2_hist=hist(res2, breaks = 10^2, plot=FALSE)
plot(x,hx,xlab="",ylab="",main="",
col="blue",lty=2,type="l",lwd=1,ylim=c(0,max(c(res1_hist$density, res2_hist$density))))
mtext("beta^hat",side=1,line=2)
mtext("density",side=2, line=2)
lines(res1_hist$mids,res1_hist$density,
col="red",lty=1,lwd=1)
lines(res2_hist$mids,res2_hist$density,
col="green",lty=1,lwd=1)
legend("topleft",
legend=c("normal distribution",
"distribution of 100000 betas with N=100",
"distribution of 100000 betas with N=25"),
col=c("blue","red","green"),
lty=c(2,1,1),cex=0.8,bty = "n")
}
plot_density(res1,res2)
set.seed(37)
S = 10000
single_loop = function(N) {
x = rnorm(N)
e = runif(N)
Y = 0.7 + 2*x + e
X = cbind(rep(1,N),x)
beta_h = ginv(t(X)%*%X)%*%t(X)%*%Y
beta1 = beta_h[2]
}
vec_loop = Vectorize(single_loop)
res1 = vec_loop(rep(25,S))
hist(res1)
res2 = vec_loop(rep(100,S))
hist(res2)
mean(res1) # 1.999372
mean(res2) # 2.000016
var(res1) # 0.003772373
var(res2) # 0.0008630136
t.test(res1, res2, alternative = "two.sided", var.equal = FALSE) # p-value = 0.3446
#Anderson-Darling normality test
ad.test(res1) # p-value = 0.4207
qqnorm(res1)
qqline(res1)
ad.test(res1) # p-value = 0.4207
qqnorm(res2)
qqline(res2)
plot_density(res1,res2)
set.seed(37)
S = 10000
single_loop = function(N) {
x = rnorm(N)
e = rcauchy(N)
Y = 0.7 + 2*x + e
X = cbind(rep(1,N),x)
beta_h = ginv(t(X)%*%X)%*%t(X)%*%Y
beta1 = beta_h[2]
}
vec_loop = Vectorize(single_loop)
res1 = vec_loop(rep(25,S))
hist(res1)
res2 = vec_loop(rep(100,S))
hist(res2)
mean(res1) # 1.907382x
mean(res2) # -1.599096
var(res1) # 3427.213
var(res2) # 29851.75
t.test(res1, res2, alternative = "two.sided", var.equal = FALSE) # p-value = 0.05461
#Anderson-Darling normality test
ad.test(res1) # p-value = 2.2e-16
qqnorm(res1)
qqline(res1)
ad.test(res1) # p-value = 2.2e-16
qqnorm(res2)
qqline(res2)
plot_density(res1,res2)
knitr::opts_chunk$set(echo = TRUE)
normality_check = function(res1, res2) {
# Test normality
library(nortest)
#Anderson-Darling normality test
ad.test(res1) # p-value = 2.064e-08
qqnorm(res1)
qqline(res1)
ad.test(res1) # p-value = 2.064e-08
qqnorm(res2)
qqline(res2)
# Plot density
# Call lm_reg and do the computation
cores=detectCores()
cl <- parallel::makeCluster(2, setup_strategy = "sequential")
registerDoParallel(cl)
stopCluster(cl)
# Plot the distribution of beta1^hat and normal distribution
x = seq(min(res1), max(res1), length=100)
hx = dnorm(x,mean=mean(res1),sd=sd(res1))
res1_hist=hist(res1, breaks = 10^2, plot=FALSE)
res2_hist=hist(res2, breaks = 10^2, plot=FALSE)
plot(x,hx,xlab="",ylab="",main="",
col="blue",lty=2,type="l",lwd=1,ylim=c(0,max(c(res1_hist$density, res2_hist$density))))
mtext("beta^hat",side=1,line=2)
mtext("density",side=2, line=2)
lines(res1_hist$mids,res1_hist$density,
col="red",lty=1,lwd=1)
lines(res2_hist$mids,res2_hist$density,
col="green",lty=1,lwd=1)
legend("topleft",
legend=c("normal distribution",
"distribution of 100000 betas with N=100",
"distribution of 100000 betas with N=25"),
col=c("blue","red","green"),
lty=c(2,1,1),cex=0.8,bty = "n")
}
normality_check(res1,res2)
normality_check = function(res1, res2) {
# Test normality
library(nortest)
#Anderson-Darling normality test
ad.test(res1) # p-value = 2.064e-08
qqnorm(res1)
qqline(res1)
ad.test(res1) # p-value = 2.064e-08
qqnorm(res2)
qqline(res2)
# Plot density
# Call lm_reg and do the computation
library(doParallel)
cores=detectCores()
cl <- parallel::makeCluster(2, setup_strategy = "sequential")
registerDoParallel(cl)
stopCluster(cl)
# Plot the distribution of beta1^hat and normal distribution
x = seq(min(res1), max(res1), length=100)
hx = dnorm(x,mean=mean(res1),sd=sd(res1))
res1_hist=hist(res1, breaks = 10^2, plot=FALSE)
res2_hist=hist(res2, breaks = 10^2, plot=FALSE)
plot(x,hx,xlab="",ylab="",main="",
col="blue",lty=2,type="l",lwd=1,ylim=c(0,max(c(res1_hist$density, res2_hist$density))))
mtext("beta^hat",side=1,line=2)
mtext("density",side=2, line=2)
lines(res1_hist$mids,res1_hist$density,
col="red",lty=1,lwd=1)
lines(res2_hist$mids,res2_hist$density,
col="green",lty=1,lwd=1)
legend("topleft",
legend=c("normal distribution",
"distribution of 100000 betas with N=100",
"distribution of 100000 betas with N=25"),
col=c("blue","red","green"),
lty=c(2,1,1),cex=0.8,bty = "n")
}
normality_check(res1,res2)
normality_check = function(res1, res2) {
# Test normality
library(nortest)
#Anderson-Darling normality test
print(ad.test(res1)) # p-value = 2.064e-08
qqnorm(res1)
qqline(res1)
print(ad.test(res1)) # p-value = 2.064e-08
qqnorm(res2)
qqline(res2)
# Plot density
# Call lm_reg and do the computation
library(doParallel)
cores=detectCores()
cl <- parallel::makeCluster(2, setup_strategy = "sequential")
registerDoParallel(cl)
stopCluster(cl)
# Plot the distribution of beta1^hat and normal distribution
x = seq(min(res1), max(res1), length=100)
hx = dnorm(x,mean=mean(res1),sd=sd(res1))
res1_hist=hist(res1, breaks = 10^2, plot=FALSE)
res2_hist=hist(res2, breaks = 10^2, plot=FALSE)
plot(x,hx,xlab="",ylab="",main="",
col="blue",lty=2,type="l",lwd=1,ylim=c(0,max(c(res1_hist$density, res2_hist$density))))
mtext("beta^hat",side=1,line=2)
mtext("density",side=2, line=2)
lines(res1_hist$mids,res1_hist$density,
col="red",lty=1,lwd=1)
lines(res2_hist$mids,res2_hist$density,
col="green",lty=1,lwd=1)
legend("topleft",
legend=c("normal distribution",
"distribution of 100000 betas with N=100",
"distribution of 100000 betas with N=25"),
col=c("blue","red","green"),
lty=c(2,1,1),cex=0.8,bty = "n")
}
normality_check(res1,res2)
set.seed(37)
S = 10000
single_loop = function(N) {
x = rnorm(N)
e = runif(N)
Y = 0.7 + 2*x + e
X = cbind(rep(1,N),x)
beta_h = ginv(t(X)%*%X)%*%t(X)%*%Y
beta1 = beta_h[2]
}
vec_loop = Vectorize(single_loop)
res1 = vec_loop(rep(25,S))
set.seed(37)
S = 10000
single_loop = function(N) {
x = rnorm(N)
e = runif(N)
Y = 0.7 + 2*x + e
X = cbind(rep(1,N),x)
beta_h = ginv(t(X)%*%X)%*%t(X)%*%Y
beta1 = beta_h[2]
}
vec_loop = Vectorize(single_loop)
res1 = vec_loop(rep(25,S))
library(MASS)
set.seed(37)
S = 10000
single_loop = function(N) {
x = rnorm(N)
e = runif(N)
Y = 0.7 + 2*x + e
X = cbind(rep(1,N),x)
beta_h = ginv(t(X)%*%X)%*%t(X)%*%Y
beta1 = beta_h[2]
}
vec_loop = Vectorize(single_loop)
res1 = vec_loop(rep(25,S))
hist(res1)
res2 = vec_loop(rep(100,S))
hist(res2)
mean(res1) # 1.999372
mean(res2) # 2.000016
var(res1) # 0.003772373
var(res2) # 0.0008630136
t.test(res1, res2, alternative = "two.sided", var.equal = FALSE) # p-value = 0.3446
normality_check(res1,res2)
set.seed(37)
S = 10000
single_loop = function(N) {
x = rnorm(N)
e = runif(N)
Y = 0.7 + 2*x + e
X = cbind(rep(1,N),x)
beta_h = ginv(t(X)%*%X)%*%t(X)%*%Y
beta1 = beta_h[2]
}
vec_loop = Vectorize(single_loop)
res1 = vec_loop(rep(25,S))
res2 = vec_loop(rep(100,S))
mean(res1) # 1.999372
mean(res2) # 2.000016
var(res1) # 0.003772373
var(res2) # 0.0008630136
t.test(res1, res2, alternative = "two.sided", var.equal = FALSE) # p-value = 0.3446
normality_check(res1,res2)
set.seed(37)
S = 10000
single_loop = function(N) {
x = rnorm(N)
e = rcauchy(N)
Y = 0.7 + 2*x + e
X = cbind(rep(1,N),x)
beta_h = ginv(t(X)%*%X)%*%t(X)%*%Y
beta1 = beta_h[2]
}
vec_loop = Vectorize(single_loop)
res1 = vec_loop(rep(25,S))
res2 = vec_loop(rep(100,S))
mean(res1) # 1.907382x
mean(res2) # -1.599096
var(res1) # 3427.213
var(res2) # 29851.75
t.test(res1, res2, alternative = "two.sided", var.equal = FALSE) # p-value = 0.05461
normality_check(res1,res2)
normality_check = function(res1, res2) {
# Test normality
library(nortest)
#Anderson-Darling normality test
print(ad.test(res1)) # p-value = 2.064e-08
qqnorm(res1)
qqline(res1)
print(ad.test(res1)) # p-value = 2.064e-08
qqnorm(res2)
qqline(res2)
# Plot density
# Call lm_reg and do the computation
library(doParallel)
cores=detectCores()
cl <- parallel::makeCluster(2, setup_strategy = "sequential")
registerDoParallel(cl)
stopCluster(cl)
# Plot the distribution of beta1^hat and normal distribution
x = seq(min(res1), max(res1), length=100)
hx = dnorm(x,mean=mean(res1),sd=sd(res1))
res1_hist=hist(res1, breaks = 10^2, plot=FALSE)
res2_hist=hist(res2, breaks = 10^2, plot=FALSE)
plot(x,hx,xlab="",ylab="",main="",
col="blue",lty=2,type="l",lwd=1,ylim=c(0,max(c(res1_hist$density, res2_hist$density))))
mtext("beta^hat",side=1,line=2)
mtext("density",side=2, line=2)
lines(res1_hist$mids,res1_hist$density,
col="red",lty=1,lwd=1)
lines(res2_hist$mids,res2_hist$density,
col="green",lty=1,lwd=1)
legend("topleft",
legend=c("normal distribution",
"distribution of 100000 betas with N=100",
"distribution of 100000 betas with N=25"),
col=c("blue","red","green"),
lty=c(2,1,1),cex=0.8,bty = "n")
}
normality_check(res1,res2)
set.seed(37)
S = 10000
single_loop = function(N) {
x = rnorm(N)
e = rnorm(N)
Y = 0.7 + 2*x + e
X = cbind(rep(1,N),x)
beta_h = ginv(t(X)%*%X)%*%t(X)%*%Y
beta1 = beta_h[2]
}
vec_loop = Vectorize(single_loop)
res1 = vec_loop(rep(25,S))
hist(res1)
res2 = vec_loop(rep(100,S))
hist(res2)
mean(res1) # 2.002271
mean(res2) # 1.998513
var(res1) # 0.04465469
var(res2) # 0.01046778
t.test(res1, res2, alternative = "two.sided", var.equal = FALSE) # p-value = 0.1095
normality_check = function(res1, res2) {
# Test normality
library(nortest)
#Anderson-Darling normality test
print(ad.test(res1)) # p-value = 2.064e-08
qqnorm(res1)
qqline(res1)
print(ad.test(res1)) # p-value = 2.064e-08
qqnorm(res2)
qqline(res2)
# Plot density
# Call lm_reg and do the computation
library(doParallel)
cores=detectCores()
cl <- parallel::makeCluster(2, setup_strategy = "sequential")
registerDoParallel(cl)
stopCluster(cl)
# Plot the distribution of beta1^hat and normal distribution
x = seq(min(res1), max(res1), length=100)
hx = dnorm(x,mean=mean(res1),sd=sd(res1))
res1_hist=hist(res1, breaks = 10^2, plot=FALSE)
res2_hist=hist(res2, breaks = 10^2, plot=FALSE)
plot(x,hx,xlab="",ylab="",main="",
col="blue",lty=2,type="l",lwd=1,ylim=c(0,max(c(res1_hist$density, res2_hist$density))))
mtext("beta^hat",side=1,line=2)
mtext("density",side=2, line=2)
lines(res1_hist$mids,res1_hist$density,
col="red",lty=1,lwd=1)
lines(res2_hist$mids,res2_hist$density,
col="green",lty=1,lwd=1)
legend("topleft",
legend=c("normal distribution",
"distribution of 100000 betas with N=100",
"distribution of 100000 betas with N=25"),
col=c("blue","red","green"),
lty=c(2,1,1),cex=0.8,bty = "n")
}
normality_check(res1,res2)
