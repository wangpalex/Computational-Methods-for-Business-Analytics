}
}
print("Maximum number of iteration reached")
}
newton_method = function(f, r0, tol=1e-8,n=1000) {
history = r0
for(i in 1:n) {
deriv = genD(func = f, x = r0)$D
r1 = r0 - f(r0)/deriv[1]
history = c(history,r1)
if(abs(r1-r0) < tol) {
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
r0 = r1
}
print("Maximum number of iteration reached")
}
sol1 = newton_method(obj_func, 0.01)
sol2 = newton_method(obj_func, 0.02)
sol3 = newton_method(obj_func, 0.03)
sol4 = bisection_method(obj_func, 0.01, 0.02)
sol5 = bisection_method(obj_func, 0.01, 0.03)
mat = cbind(sol1$history,sol2$history,sol3$history)
maxLen = nrow(mat)
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",ylim=c(0.01,0.03))
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="red")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="green")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
library(numDeriv)
obj_func = function(r, x0=10000,p=250, n=60) {
x = x0
for(i in 1:n) {
x = x*(1+r)-p
}
res = x
}
bisection_method = function(f,left,right,tol=1e-8,n=1000) {
if(sign(f(left))==sign(f(right))) {
print("Bad Initial Points!")
stop()
}
history = right
for (i in 1:n) {
mid = (left+right)/2
if (f(mid)==0) {
history = c(history,mid)
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
} else if(sign(f(mid))==sign(f(right))) {
right = mid
history = c(history,right)
} else {
left = mid
history = c(history,left)
}
if(abs(left-right)<tol) {
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
}
}
print("Maximum number of iteration reached")
}
newton_method = function(f, r0, tol=1e-8,n=1000) {
history = r0
for(i in 1:n) {
deriv = genD(func = f, x = r0)$D
r1 = r0 - f(r0)/deriv[1]
history = c(history,r1)
if(abs(r1-r0) < tol) {
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
r0 = r1
}
print("Maximum number of iteration reached")
}
sol1 = newton_method(obj_func, 0.01)
sol2 = newton_method(obj_func, 0.02)
sol3 = newton_method(obj_func, 0.03)
sol4 = bisection_method(obj_func, 0.01, 0.025)
sol5 = bisection_method(obj_func, 0.01, 0.03)
mat = cbind(sol1$history,sol2$history,sol3$history)
maxLen = nrow(mat)
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",ylim=c(0.01,0.03))
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="red")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="green")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
library(numDeriv)
obj_func = function(r, x0=10000,p=250, n=60) {
x = x0
for(i in 1:n) {
x = x*(1+r)-p
}
res = x
}
bisection_method = function(f,left,right,tol=1e-8,n=1000) {
if(sign(f(left))==sign(f(right))) {
print("Bad Initial Points!")
stop()
}
history = right
for (i in 1:n) {
mid = (left+right)/2
if (f(mid)==0) {
history = c(history,mid)
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
} else if(sign(f(mid))==sign(f(right))) {
right = mid
history = c(history,right)
} else {
left = mid
history = c(history,left)
}
if(abs(left-right)<tol) {
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
}
}
print("Maximum number of iteration reached")
}
newton_method = function(f, r0, tol=1e-8,n=1000) {
history = r0
for(i in 1:n) {
deriv = genD(func = f, x = r0)$D
r1 = r0 - f(r0)/deriv[1]
history = c(history,r1)
if(abs(r1-r0) < tol) {
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
r0 = r1
}
print("Maximum number of iteration reached")
}
sol1 = newton_method(obj_func, 0.01)
sol2 = newton_method(obj_func, 0.02)
sol3 = newton_method(obj_func, 0.03)
sol4 = bisection_method(obj_func, 0.01, 0.025)
sol5 = bisection_method(obj_func, 0.01, 0.15)
mat = cbind(sol1$history,sol2$history,sol3$history)
maxLen = nrow(mat)
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",ylim=c(0.01,0.03))
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="red")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="green")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
sol5$`optim r`
knitr::opts_chunk$set(echo = TRUE)
library(numDeriv)
obj_func = function(r, x0=10000,p=250, n=60) {
x = x0
for(i in 1:n) {
x = x*(1+r)-p
}
res = x
}
bisection_method = function(f,left,right,tol=1e-8,n=1000) {
if(sign(f(left))==sign(f(right))) {
print("Bad Initial Points!")
stop()
}
history = right
for (i in 1:n) {
mid = (left+right)/2
if (f(mid)==0) {
history = c(history,mid)
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
} else if(sign(f(mid))==sign(f(right))) {
right = mid
history = c(history,right)
} else {
left = mid
history = c(history,left)
}
if(abs(left-right)<tol) {
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
}
}
print("Maximum number of iteration reached")
}
newton_method = function(f, r0, tol=1e-8,n=1000) {
history = r0
for(i in 1:n) {
deriv = genD(func = f, x = r0)$D
r1 = r0 - f(r0)/deriv[1]
history = c(history,r1)
if(abs(r1-r0) < tol) {
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
r0 = r1
}
print("Maximum number of iteration reached")
}
sol1 = newton_method(obj_func, 0.01)
sol2 = newton_method(obj_func, 0.02)
sol3 = newton_method(obj_func, 0.03)
sol4 = bisection_method(obj_func, 0.01, 0.025)
sol5 = bisection_method(obj_func, 0.01, 0.15)
mat = cbind(sol1$history,sol2$history,sol3$history)
maxLen = nrow(mat)
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",ylim=c(0.01,0.03))
abline(0,sol1$`optim r`)
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="red")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="green")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
library(numDeriv)
obj_func = function(r, x0=10000,p=250, n=60) {
x = x0
for(i in 1:n) {
x = x*(1+r)-p
}
res = x
}
bisection_method = function(f,left,right,tol=1e-8,n=1000) {
if(sign(f(left))==sign(f(right))) {
print("Bad Initial Points!")
stop()
}
history = right
for (i in 1:n) {
mid = (left+right)/2
if (f(mid)==0) {
history = c(history,mid)
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
} else if(sign(f(mid))==sign(f(right))) {
right = mid
history = c(history,right)
} else {
left = mid
history = c(history,left)
}
if(abs(left-right)<tol) {
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
}
}
print("Maximum number of iteration reached")
}
newton_method = function(f, r0, tol=1e-8,n=1000) {
history = r0
for(i in 1:n) {
deriv = genD(func = f, x = r0)$D
r1 = r0 - f(r0)/deriv[1]
history = c(history,r1)
if(abs(r1-r0) < tol) {
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
r0 = r1
}
print("Maximum number of iteration reached")
}
sol1 = newton_method(obj_func, 0.01)
sol2 = newton_method(obj_func, 0.02)
sol3 = newton_method(obj_func, 0.03)
sol4 = bisection_method(obj_func, 0.01, 0.025)
sol5 = bisection_method(obj_func, 0.01, 0.15)
mat = cbind(sol1$history,sol2$history,sol3$history)
maxLen = nrow(mat)
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",ylim=c(0.01,0.03))
abline(sol1$`optim r`)
library(numDeriv)
obj_func = function(r, x0=10000,p=250, n=60) {
x = x0
for(i in 1:n) {
x = x*(1+r)-p
}
res = x
}
bisection_method = function(f,left,right,tol=1e-8,n=1000) {
if(sign(f(left))==sign(f(right))) {
print("Bad Initial Points!")
stop()
}
history = right
for (i in 1:n) {
mid = (left+right)/2
if (f(mid)==0) {
history = c(history,mid)
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
} else if(sign(f(mid))==sign(f(right))) {
right = mid
history = c(history,right)
} else {
left = mid
history = c(history,left)
}
if(abs(left-right)<tol) {
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
}
}
print("Maximum number of iteration reached")
}
newton_method = function(f, r0, tol=1e-8,n=1000) {
history = r0
for(i in 1:n) {
deriv = genD(func = f, x = r0)$D
r1 = r0 - f(r0)/deriv[1]
history = c(history,r1)
if(abs(r1-r0) < tol) {
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
r0 = r1
}
print("Maximum number of iteration reached")
}
sol1 = newton_method(obj_func, 0.01)
sol2 = newton_method(obj_func, 0.02)
sol3 = newton_method(obj_func, 0.03)
sol4 = bisection_method(obj_func, 0.01, 0.025)
sol5 = bisection_method(obj_func, 0.01, 0.15)
mat = cbind(sol1$history,sol2$history,sol3$history)
maxLen = nrow(mat)
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",ylim=c(0.01,0.03))
abline(sol1$`optim r`,0)
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="red")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="green")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
library(numDeriv)
obj_func = function(r, x0=10000,p=250, n=60) {
x = x0
for(i in 1:n) {
x = x*(1+r)-p
}
res = x
}
bisection_method = function(f,left,right,tol=1e-8,n=1000) {
if(sign(f(left))==sign(f(right))) {
print("Bad Initial Points!")
stop()
}
history = right
for (i in 1:n) {
mid = (left+right)/2
if (f(mid)==0) {
history = c(history,mid)
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
} else if(sign(f(mid))==sign(f(right))) {
right = mid
history = c(history,right)
} else {
left = mid
history = c(history,left)
}
if(abs(left-right)<tol) {
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
}
}
print("Maximum number of iteration reached")
}
newton_method = function(f, r0, tol=1e-8,n=1000) {
history = r0
for(i in 1:n) {
deriv = genD(func = f, x = r0)$D
r1 = r0 - f(r0)/deriv[1]
history = c(history,r1)
if(abs(r1-r0) < tol) {
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
r0 = r1
}
print("Maximum number of iteration reached")
}
sol1 = newton_method(obj_func, 0.01)
sol2 = newton_method(obj_func, 0.02)
sol3 = newton_method(obj_func, 0.03)
sol4 = bisection_method(obj_func, 0.01, 0.025)
sol5 = bisection_method(obj_func, 0.01, 0.15)
mat = cbind(sol1$history,sol2$history,sol3$history)
maxLen = nrow(mat)
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",ylim=c(0.01,0.03))
abline(sol1$`optim r`,0,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="red")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="green")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
invSampling(e6)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
invSampling(10^6)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
gainFunc = function(x,y) {
return(y*(log(x)+1)-y^2*sqrt(1-x^4))
}
hist(invSampling(10^6))
revenue = function(x,y) {
return(y*(log(x)+1)-y^2*sqrt(1-x^4))
}
expectedReturn = function(y) {
# Compute expected return given y
N = 1000000
x = invSampling(N)
sum(mapply(revenue, invSampling(N),rep(y,N)) * 1/N)
}
expectedReturn(1)
revenue = function(x,y) {
return(y*(log(x)+1)-y^2*sqrt(1-x^4))
}
expectedReturn = function(y) {
# Compute expected return given y
N = 1000000
x = invSampling(N)
sum(mapply(revenue, invSampling(N),rep(y,N)) * 1/N)
}
y = seq(0,1,0.01)
returns = sapply(expectedReturn, y)
revenue = function(x,y) {
return(y*(log(x)+1)-y^2*sqrt(1-x^4))
}
expectedReturn = function(y) {
# Compute expected return given y
N = 1000000
x = invSampling(N)
sum(mapply(revenue, invSampling(N),rep(y,N)) * 1/N)
}
y = seq(0,1,0.01)
returns = sapply(y,expectedReturn)
plot(y ~ returns)
revenue = function(x,y) {
return(y*(log(x)+1)-y^2*sqrt(1-x^4))
}
expectedReturn = function(y) {
# Compute expected return given y
N = 1000000
x = invSampling(N)
sum(mapply(revenue, invSampling(N),rep(y,N)) * 1/N)
}
y = seq(0,1,0.01)
returns = sapply(y,expectedReturn)
plot(returns ~ y, lty="solid")
plot(returns ~ y, lty="solid")
revenue = function(x,y) {
return(y*(log(x)+1)-y^2*sqrt(1-x^4))
}
expectedReturn = function(y) {
# Compute expected return given y
N = 1000000
x = invSampling(N)
sum(mapply(revenue, invSampling(N),rep(y,N)))/N
}
expectedReturn(1)
plot(returns ~ y, lty="solid")
abline(1,0)
plot(returns ~ y, lty="solid")
abline(1,0)
plot(returns ~ y, lty="solid")
abline(0,1)
plot(returns ~ y, lty="solid")
abline(1,0)
plot(returns ~ y, lty="solid")
abline(1,1)
plot(returns ~ y, lty="solid")
abline(0,0.05)
plot(returns ~ y, lty="solid")
abline(0,0)
plot(returns ~ y, type="l")
abline(0,0)
plot(returns ~ y, type="b")
abline(0,0)
plot(returns ~ y, type="d")
plot(returns ~ y, type="l")
abline(0,0)
optim(0,-1*expectedReturn)
optim(-1*expectedReturn,0)
?optim
optim(0.function(y){-1*expectedReturn(y)})
optim(0, function(y){-1*expectedReturn(y)})
plot(returns ~ y, type="l")
abline(0,0)
revenue = function(x,y) {
return(y*(log(x)+1)-y^2*sqrt(1-x^4))
}
X = invSampling(N)
revenue = function(x,y) {
return(y*(log(x)+1)-y^2*sqrt(1-x^4))
}
X = invSampling(1000000)
expectedReturn = function(y) {
# Compute expected return given y
N = 1000000
#X = invSampling(N)
Y = rep(y,N)
sum(mapply(revenue, X, Y))/N
}
plot(returns ~ y, type="l")
abline(0,0)
optim(0, function(y){-1*expectedReturn(y)})
