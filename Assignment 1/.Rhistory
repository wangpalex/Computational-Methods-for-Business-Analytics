lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",legend=c("Bisection", "Bisection", "Newton", "Newton", "Newton"),col=c("blue","green","orange","purple","red"),lty="solid")
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
x = seq(0,1,0.01)
lines(x, 3*x^2)
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
x = seq(0,1,0.01)
lines(x, x)
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
x = seq(0,1,0.01)
y = 3*x^2
lines(x, y)
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
x = seq(0,1,0.01)
y = 3*x^2
lines(x, y,new=TRUE)
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
x = seq(0,1,0.01)
y = 3*x^2
lines(x, y)
x
y
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
x = seq(0,1,0.01)
y = 3*x^2
plot(y~x)
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
x = seq(0,1,0.01)
y = 3*x^2
plot(y~x,lty="l")
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
x = seq(0,1,0.01)
y = 3*x^2
plot(y~x,lty="solid")
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
x = seq(0,1,0.01)
y = 3*x^2
plot(y~x,type="l")
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
x = seq(0,1,0.01)
y = 3*10^6*x^2
plot(y~x,type="l")
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
x = seq(0,1,0.01)
y = 3*(10^6)*x^2
plot(y~x,type="l")
bisection_method = function(f,left,right,tol=1e-10,n=1000) {
if(sign(f(left))==sign(f(right))) {
print("Bad Initial Points!")
stop()
}
history = right
for (i in 1:n) {
mid = (left+right)/2
if (f(mid)==0 || abs(left-right) < tol) {
history = c(history,mid)
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
} else if (sign(f(mid))==sign(f(right))) {
right = mid
history = c(history,right)
} else {
left = mid
history = c(history,left)
}
}
print("Maximum number of iteration reached")
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
}
newton_method = function(f, r0, tol=1e-8,n=1000) {
history = r0
for(i in 1:n) {
deriv = genD(func = f, x = r0)$D
r1 = r0 - f(r0)/deriv[1]
history = c(history,r1)
if(abs(r1-r0) < tol) {
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
r0 = r1
}
print("Maximum number of iteration reached")
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
# Start searching from 1% interest rate
sol1 = newton_method(func2, 0.01)
# Load packages
library(Matrix) # Matrix operations
library(MASS) # For Moore-Penrose pseudo-inverse ginv()
library(doParallel) # Parallel computing
library(nortest) # Anderson-Darling normality test
# Load packages
library(Matrix) # Matrix operations
library(MASS) # For Moore-Penrose pseudo-inverse ginv()
library(doParallel) # Parallel computing
library(nortest) # Anderson-Darling normality test
library(numDeriv) # genD()
func1 = function(r, x0=10000,p=250, n=60) {
# Iteration method to calculate xn
x = x0
for(i in 1:n) {
x = x*(1+r) - p
}
res = x
}
func2 = function(r, x0=10000,p=250, n=60) {
# Close form of xn
xn = x0*(1+r)^n + p*(1-(1+r)^n)/r
}
bisection_method = function(f,left,right,tol=1e-10,n=1000) {
if(sign(f(left))==sign(f(right))) {
print("Bad Initial Points!")
stop()
}
history = right
for (i in 1:n) {
mid = (left+right)/2
if (f(mid)==0 || abs(left-right) < tol) {
history = c(history,mid)
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
} else if (sign(f(mid))==sign(f(right))) {
right = mid
history = c(history,right)
} else {
left = mid
history = c(history,left)
}
}
print("Maximum number of iteration reached")
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
}
newton_method = function(f, r0, tol=1e-8,n=1000) {
history = r0
for(i in 1:n) {
deriv = genD(func = f, x = r0)$D
r1 = r0 - f(r0)/deriv[1]
history = c(history,r1)
if(abs(r1-r0) < tol) {
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
r0 = r1
}
print("Maximum number of iteration reached")
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
# Start searching from 1% interest rate
sol1 = newton_method(func2, 0.01)
sol2 = newton_method(func2, 0.02)
sol3 = newton_method(func2, 0.03)
sol4 = bisection_method(func2, 0.01, 0.04)
sol5 = bisection_method(func2, 0.01, 0.05)
c(sol1$`optim r`, sol2$`optim r`, sol3$`optim r`,
sol4$`optim r`, sol5$`optim r`)
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",legend=c("Bisection", "Bisection", "Newton", "Newton", "Newton"),col=c("blue","green","orange","purple","red"),lty="solid")
bisection_method = function(f,left,right,tol=1e-10,n=1000) {
if(sign(f(left))==sign(f(right))) {
print("Bad Initial Points!")
stop()
}
history = right
for (i in 1:n) {
mid = (left+right)/2
if (f(mid)==0 || abs(left-right) < tol) {
history = c(history,mid)
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
} else if (sign(f(mid))==sign(f(right))) {
right = mid
history = c(history,right)
} else {
left = mid
history = c(history,left)
}
}
print("Maximum number of iteration reached")
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
}
newton_method = function(f, r0, tol=1e-8,n=1000) {
history = r0
for(i in 1:n) {
deriv = genD(func = f, x = r0)$D
r1 = r0 - f(r0)/deriv[1]
history = c(history,r1)
if(abs(r1-r0) < tol) {
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
r0 = r1
}
print("Maximum number of iteration reached")
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
# Start searching from 1% interest rate
sol1 = newton_method(func2, 0.01)
sol2 = newton_method(func2, 0.02)
sol3 = newton_method(func2, 0.03)
sol4 = bisection_method(func2, 0.01, 0.04)
sol5 = bisection_method(func2, 0.01, 0.05)
c(sol1$`optim r`, sol2$`optim r`, sol3$`optim r`,
sol4$`optim r`, sol5$`optim r`)
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",legend=c("Bisection", "Bisection", "Newton", "Newton", "Newton"),col=c("blue","green","orange","purple","red"),lty="solid")
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",
legend=c("Bisection:"+sol5$iterations+" iterations",
"Bisection:"+sol1$iterations+" iterations",
"Newton"+sol2$iterations+" iterations",
"Newton"+sol3$iterations+" iterations",
"Newton"+sol4$iterations+" iterations"),
col=c("blue","green","orange","purple","red"),lty="solid")
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",
legend=c(cat("Bisection:",sol5$iterations," iterations"),
cat("Bisection:",sol1$iterations," iterations"),
cat("Newton",sol2$iterations," iterations"),
cat("Newton",sol3$iterations," iterations"),
cat("Newton",sol4$iterations," iterations"),
col=c("blue","green","orange","purple","red"),lty="solid")
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",
legend=c(paste("Bisection:",sol5$iterations," iterations"),
paste("Bisection:",sol1$iterations," iterations"),
paste("Newton",sol2$iterations," iterations"),
paste("Newton",sol3$iterations," iterations"),
paste("Newton",sol4$iterations," iterations"),
col=c("blue","green","orange","purple","red"),lty="solid")
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",
legend=c(paste("Bisection:",sol5$iterations," iterations"),
paste("Bisection:",sol1$iterations," iterations"),
paste("Newton",sol2$iterations," iterations"),
paste("Newton",sol3$iterations," iterations"),
paste("Newton",sol4$iterations," iterations")),
col=c("blue","green","orange","purple","red"),lty="solid")
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",
legend=c(paste("Bisection:",sol5$iterations," iterations"),
paste("Bisection:",sol1$iterations," iterations"),
paste("Newton:",sol2$iterations," iterations"),
paste("Newton:",sol3$iterations," iterations"),
paste("Newton:",sol4$iterations," iterations")),
col=c("blue","green","orange","purple","red"),lty="solid")
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",
legend=c(paste("Bisection:",sol5$iterations," iterations"),
paste("Newton:",sol1$iterations," iterations"),
paste("Newton:",sol2$iterations," iterations"),
paste("Newton:",sol3$iterations," iterations"),
paste("Bisection:",sol4$iterations," iterations")),
col=c("blue","green","orange","purple","red"),lty="solid")
bisection_method = function(f,left,right,tol=1e-10,n=1000) {
if(sign(f(left))==sign(f(right))) {
print("Bad Initial Points!")
stop()
}
history = right
for (i in 1:n) {
mid = (left+right)/2
if (f(mid)==0 || abs(left-right) < tol) {
history = c(history,mid)
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
} else if (sign(f(mid))==sign(f(right))) {
right = mid
history = c(history,right)
} else {
left = mid
history = c(history,left)
}
}
print("Maximum number of iteration reached")
res = list('optim r' = mid, 'iterations' = i,'history'=history)
return(res)
}
newton_method = function(f, r0, tol=1e-8,n=1000) {
history = r0
for(i in 1:n) {
deriv = genD(func = f, x = r0)$D
r1 = r0 - f(r0)/deriv[1]
history = c(history,r1)
if(abs(r1-r0) < tol) {
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
r0 = r1
}
print("Maximum number of iteration reached")
res = list('optim r' = r1, 'iterations' = i,'history'=history)
return(res)
}
# Start searching from 1% interest rate
sol1 = newton_method(func2, 0.01)
sol2 = newton_method(func2, 0.02)
sol3 = newton_method(func2, 0.03)
sol4 = bisection_method(func2, 0.01, 0.04)
sol5 = bisection_method(func2, 0.01, 0.05)
c(sol1$`optim r`, sol2$`optim r`, sol3$`optim r`,
sol4$`optim r`, sol5$`optim r`)
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",
legend=c(paste("Bisection:",sol5$iterations," iterations"),
paste("Newton:",sol1$iterations," iterations"),
paste("Newton:",sol2$iterations," iterations"),
paste("Newton:",sol3$iterations," iterations"),
paste("Bisection:",sol4$iterations," iterations")),
col=c("blue","green","orange","purple","red"),lty="solid")
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",
legend=c(paste("Bisection:",sol5$iterations,"iterations"),
paste("Newton:",sol1$iterations,"iterations"),
paste("Newton:",sol2$iterations,"iterations"),
paste("Newton:",sol3$iterations,"iterations"),
paste("Bisection:",sol4$iterations,"iterations")),
col=c("blue","green","orange","purple","red"),lty="solid")
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",
legend=c(paste("Bisection:",sol5$iterations,"iterations"),
paste("Newton:",sol4$iterations,"iterations"),
paste("Newton:",sol3$iterations,"iterations"),
paste("Newton:",sol2$iterations,"iterations"),
paste("Newton:",sol1$iterations,"iterations")),
col=c("blue","green","orange","purple","red"),lty="solid")
plot(1:length(sol5$history),sol5$history,type="b",pch=20,col="blue",
xlim=c(1,15),ylim=c(0.01,0.05),xlab="iterations",ylab="r")
abline(sol1$`optim r`,0,col="black")
lines(1:length(sol1$history),sol1$history,type="b",pch=20,col="red")
lines(1:length(sol2$history),sol2$history,type="b",pch=20,col="purple")
lines(1:length(sol3$history),sol3$history,type="b",pch=20,col="orange")
lines(1:length(sol4$history),sol4$history,type="b",pch=20,col="green")
legend("topright",
legend=c(paste("Bisection:",sol5$iterations,"iterations"),
paste("Bisection:",sol4$iterations,"iterations"),
paste("Newton:",sol3$iterations,"iterations"),
paste("Newton:",sol2$iterations,"iterations"),
paste("Newton:",sol1$iterations,"iterations")),
col=c("blue","green","orange","purple","red"),lty="solid")
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
knitr::opts_chunk$set(echo = TRUE)
set.seed(37)
revenue = function(x,y) {
return(y*(log(x)+1)-y^2*sqrt(1-x^4))
}
X = invSampling(1000000)
expectedReturn = function(y) {
# Compute expected return given y
N = 1000000
#X = invSampling(N)
Y = rep(y,N)
# Take mean of 10^6 sampled return to approximate expectation
res = sum(mapply(revenue, X, Y))/N
}
set.seed(37)
invSampling = function(N) {
# Returns a vector of N elements sampled by inversion.
return(runif(N)^(1/3))
}
hist(invSampling(10^6),xlab="X")
set.seed(37)
revenue = function(x,y) {
return(y*(log(x)+1)-y^2*sqrt(1-x^4))
}
X = invSampling(1000000)
expectedReturn = function(y) {
# Compute expected return given y
N = 1000000
X = invSampling(N)
Y = rep(y,N)
# Take mean of 10^6 sampled return to approximate expectation
res = sum(mapply(revenue, X, Y))/N
}
# take y from 0 to 1 with step 0.01
Y = seq(0,1,0.01)
returns = sapply(Y,expectedReturn)
plot(returns ~ Y, type="l")
abline(0,0)
getwd
getwd()
